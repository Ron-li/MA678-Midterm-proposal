plot(fit1)
library(DAAG)
install.packages("DAAG")
library(DAAG)
df$logprice <- log(df$price)
fit1 <- lm(logprice ~ factor(bedrooms) + factor(bathrooms) + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + factor(grade) + factor(zipcode) + age, data = training)
## Model
tocut <- floor(length(df[,1]) * 0.8)
training <- df[1:tocut, ]
testing <- df[(tocut+1):length(df[,1]),]
fit1 <- lm(logprice ~ factor(bedrooms) + factor(bathrooms) + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + factor(grade) + factor(zipcode) + age, data = training)
summary(fit1)
## Cross-Validation
cv.lm(df, form.lm=formula(logprice ~ factor(bedrooms) + factor(bathrooms) + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + factor(grade) + factor(zipcode) + age),
m=3, dots = FALSE, plotit = T, printit = T)
nrow(df)
## Model
## create training and testing data
set.seed(1)
trainingrow <- sample(1:nrow(df), 0.8*nrow(df))
training <- df[trainingrow, ]
testing <- df[-trainingrow,]
fit1 <- lm(logprice ~ factor(bedrooms) + factor(bathrooms) + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + factor(grade) + factor(zipcode) + age, data = training)
summary(fit1)
predtest <- predict(fit1, testing)
fit1 <- lm(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + factor(grade) + factor(zipcode) + age, data = training)
summary(fit1)
predtest <- predict(fit1, testing)
## calculate the accuracy and error rate
actualpred <- data.frame(cbind(actuals = testing$logprice, predicteds = predtest))
correlationaccuracy <- cor(actualpred)
correlationaccuracy
head(actualpred)
## k-fold Cross-Validation
cv.lm(df, form.lm=formula(logprice ~ factor(bedrooms) + factor(bathrooms) + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + factor(grade) + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = T)
## k-fold Cross-Validation
cv.lm(df, form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + factor(grade) + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = T)
## k-fold Cross-Validation
cv.lm(df, form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = T)
## k-fold Cross-Validation
par(mfrow=c(1, 1))
cv.lm(df, form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = T)
library(stringr)
library(magrittr)
library(ggplot2)
library(dplyr)
library(leaflet)
library(arm)
library(DAAG)
# load the date
setwd("/Users/amelia/Documents/mssp/MA678/MA678-Midterm-proposal")
df <- read.table("kc_house_data.txt", sep = ",", header = T)
df$date %<>% str_sub(1, 8)
df$year <- str_sub(df$date, 1, 4)
df$month <- str_sub(df$date, 5, 6)
df$day <- str_sub(df$date, 7, 8)
df$yr_latest <- ifelse(df$yr_built > df$yr_renovated, df$yr_built, df$yr_renovated)
df$year %<>% as.numeric()
df$yr_latest %<>% as.numeric()
df$age <- df$year - df$yr_latest
df$logprice <- log(df$price)
df %<>% na.omit()
## I wonder the most common house
comhouse <- df %>% group_by(bedrooms, floors) %>% summarise(count = sum(price > 0))
p1 <- ggplot(comhouse, aes(x = floors, y = bedrooms, size = count)) +
geom_point() +
ylim(0, 13) +
ggtitle("The most common house") +
theme(plot.title = element_text(hjust = 0.5))
p1
## houses are best sold in which month?
monhouse <- df %>% group_by(month) %>% summarise(count = sum(price > 0))
p2 <- ggplot(monhouse, aes(x = month, y = count, fill = factor(month))) +
geom_bar(stat = "identity") +
guides(fill = F)
p2
## I wonder the location of these houses
df%>%leaflet()%>%addTiles()%>%
addCircleMarkers(lng=~long,lat=~lat, radius = 0.05, fill = F)
## I wonder what factors may influence the house price
### will the location influence the house price?
p3 <- ggplot(data = df, mapping = aes(x = factor(zipcode), price)) +
geom_boxplot() +
coord_flip()
p3
## I wonder what factors may influence the house price
### will the number of bedrooms influence the house price?
p3 <- ggplot(data = df, mapping = aes(x = factor(bedrooms), price)) +
geom_boxplot() +
coord_flip()
p3
## I wonder what factors may influence the house price
### will the number of bedrooms influence the house price?
p3 <- ggplot(data = df, mapping = aes(x = factor(bedrooms), price)) +
geom_boxplot()
p3
### will the number of bedrooms influence the house price?
p4 <- ggplot(data = df, mapping = aes(x = factor(bathrooms), price)) +
geom_boxplot()
p4
### will the living area influence the house price?
p4 <- ggplot(data = df, mapping = aes(x = sqft_living, price)) +
geom_boxplot()
p4
### will the living area influence the house price?
p5 <- ggplot(data = df, mapping = aes(x = sqft_living, price)) +
geom_boxplot()
p5
### will the living area influence the house price?
p5 <- ggplot(data = df, mapping = aes(x = sqft_living, price)) +
geom_point()
p5
### will the living area influence the house price?
p5 <- ggplot(data = df, mapping = aes(x = sqft_living, price)) +
geom_point() + geom_smooth()
p5
### will the number of floors influence the house price?
p6 <- ggplot(data = df, mapping = aes(x = factor(floors), price)) +
geom_boxplot()
p6
### will the waterfront influence the house price?
p6 <- ggplot(data = df, mapping = aes(x = factor(floors), price)) +
geom_boxplot()
### will the waterfront influence the house price?
p7 <- ggplot(data = df, mapping = aes(x = factor(waterfront), price)) +
geom_boxplot()
p7
### will the waterfront influence the house price?
p8 <- ggplot(data = df, mapping = aes(x = factor(view), price)) +
geom_boxplot()
p8
df2 <- select(df, year, month, day, age, price, logprice, bedrooms,
bathrooms, sqft_living, floors, waterfront, view,
condition, grade, zipcode, lat, long)
df2 <- subset(df, year, month, day, age, price, logprice, bedrooms,
bathrooms, sqft_living, floors, waterfront, view,
condition, grade, zipcode, lat, long)
df2 <- df %>% select(year, month, day, age, price, logprice, bedrooms,
bathrooms, sqft_living, floors, waterfront, view,
condition, grade, zipcode, lat, long)
df2 <- df %>% dplyr::select(year, month, day, age, price, logprice, bedrooms,
bathrooms, sqft_living, floors, waterfront, view,
condition, grade, zipcode, lat, long)
cor(df2[,7:17])
# use training data
fit1 <- lm(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age, data = training)
# load the date
setwd("/Users/amelia/Documents/mssp/MA678/MA678-Midterm-proposal")
df <- read.table("kc_house_data.txt", sep = ",", header = T)
df$date %<>% str_sub(1, 8)
df$year <- str_sub(df$date, 1, 4)
df$month <- str_sub(df$date, 5, 6)
df$day <- str_sub(df$date, 7, 8)
df$yr_latest <- ifelse(df$yr_built > df$yr_renovated, df$yr_built, df$yr_renovated)
df$year %<>% as.numeric()
df$yr_latest %<>% as.numeric()
df$age <- df$year - df$yr_latest
df$logprice <- log(df$price)
df %<>% na.omit()
df2 <- df %>% dplyr::select(year, month, day, age, price, logprice, bedrooms,
bathrooms, sqft_living, floors, waterfront, view,
condition, grade, zipcode, lat, long)
## I wonder the most common house
comhouse <- df %>% group_by(bedrooms, floors) %>% summarise(count = sum(price > 0))
p1 <- ggplot(comhouse, aes(x = floors, y = bedrooms, size = count)) +
geom_point() +
ylim(0, 13) +
ggtitle("The most common house") +
theme(plot.title = element_text(hjust = 0.5))
p1
## houses are best sold in which month?
monhouse <- df %>% group_by(month) %>% summarise(count = sum(price > 0))
p2 <- ggplot(monhouse, aes(x = month, y = count, fill = factor(month))) +
geom_bar(stat = "identity") +
guides(fill = F)
p2
## I wonder the location of these houses
df%>%leaflet()%>%addTiles()%>%
addCircleMarkers(lng=~long,lat=~lat, radius = 0.05, fill = F)
## I wonder what factors may influence the house price
### will the number of bedrooms influence the house price?
p3 <- ggplot(data = df, mapping = aes(x = factor(bedrooms), price)) +
geom_boxplot()
p3
### will the number of bathrooms influence the house price?
p4 <- ggplot(data = df, mapping = aes(x = factor(bathrooms), price)) +
geom_boxplot()
p4
### will the living area influence the house price?
p5 <- ggplot(data = df, mapping = aes(x = sqft_living, price)) +
geom_point() + geom_smooth()
p5
### will the number of floors influence the house price?
p6 <- ggplot(data = df, mapping = aes(x = factor(floors), price)) +
geom_boxplot()
p6
### will the waterfront influence the house price?
p7 <- ggplot(data = df, mapping = aes(x = factor(waterfront), price)) +
geom_boxplot()
p7
### will the view influence the house price?
p8 <- ggplot(data = df, mapping = aes(x = factor(view), price)) +
geom_boxplot()
p8
### will the waterfront influence the house price?
p5 <- ggplot(data = df, mapping = aes(x = sqft_living, price)) +
geom_point() + geom_smooth()
p5
### will the location influence the house price?
p3 <- ggplot(data = df, mapping = aes(x = factor(zipcode), price)) +
geom_boxplot() +
coord_flip()
p3
## Model
## create training and testing data
set.seed(1)
trainingrow <- sample(1:nrow(df), 0.8*nrow(df))
training <- df[trainingrow, ]
testing <- df[-trainingrow,]
# use training data
fit1 <- lm(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age, data = training)
summary(fit1)
library(car)
vif(fit1)
## k-fold Cross-Validation
par(mfrow=c(1, 1))
cv.lm(df, form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = T)
data.frame( R2 = R2(predtest, testing$logprice),
RMSE = RMSE(predtest, testing$logprice),
MAE = MAE(predtest, testing$logprice))
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
update.packages("caret")
update.packages("caret")
library(caret)
install.packages("caret")
library(caret)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
pacman::p_load(stringr, magrittr, ggplot2, dplyr, leaflet, arm, DAAG, car, caret, png, grid, gridExtra)
summary(fit1)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
pacman::p_load(stringr, magrittr, ggplot2, dplyr, leaflet, arm, DAAG, car, caret, png, grid, gridExtra)
# load data
setwd("/Users/amelia/Documents/mssp/MA678/MA678-Midterm-proposal")
df <- read.table("kc_house_data.txt", sep = ",", header = T)
# select data
df$date %<>% str_sub(1, 8)
df$year <- str_sub(df$date, 1, 4)
df$month <- str_sub(df$date, 5, 6)
df$day <- str_sub(df$date, 7, 8)
df$yr_latest <- ifelse(df$yr_built > df$yr_renovated, df$yr_built, df$yr_renovated)
df$year %<>% as.numeric()
df$yr_latest %<>% as.numeric()
df$age <- df$year - df$yr_latest
df$logprice <- log(df$price)
df %<>% na.omit()
comhouse <- df %>% group_by(bedrooms, floors) %>% summarise(count = sum(price > 0))
p1 <- ggplot(comhouse, aes(x = floors, y = bedrooms, size = count)) +
geom_point() +
ylim(0, 13) +
ggtitle("The most common house") +
theme(plot.title = element_text(hjust = 0.5))
p1
monhouse <- df %>% group_by(month) %>% summarise(count = sum(price > 0))
p2 <- ggplot(monhouse, aes(x = month, y = count, fill = factor(month))) +
geom_bar(stat = "identity") +
guides(fill = F)
p2
## I wonder the location of these houses
#df%>%leaflet()%>%addTiles()%>%
#  addCircleMarkers(lng=~long,lat=~lat, radius = 0.05, fill = F)
img <- readPNG("/Users/amelia/Documents/mssp/MA678/MA678-Midterm-proposal/Rplot.png")
grid.raster(img)
## They are in Washington state, and in Seattle.
## I wonder the location of these houses
#df%>%leaflet()%>%addTiles()%>%
#  addCircleMarkers(lng=~long,lat=~lat, radius = 0.05, fill = F)
img <- readPNG("/Users/amelia/Documents/mssp/MA678/MA678-Midterm-proposal/Rplot.png")
grid.raster(img)
## They are in Washington state, and in Seattle.
## create training and testing data
set.seed(1)
trainingrow <- sample(1:nrow(df), 0.8*nrow(df))
training <- df[trainingrow, ]
testing <- df[-trainingrow,]
# use training data
fit1 <- lm(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age, data = training)
vif(fit1)
summary(df)
## I wonder what factors may influence the house price
### will the number of bedrooms influence the house price?
p2 <- ggplot(data = df, mapping = aes(x = factor(bedrooms), price)) +
geom_boxplot()
### will the number of bathrooms influence the house price?
p3 <- ggplot(data = df, mapping = aes(x = factor(bathrooms), price)) +
geom_boxplot()
### will the living area influence the house price?
p4 <- ggplot(data = df, mapping = aes(x = sqft_living, price)) +
geom_point() + geom_smooth()
### will the number of floors influence the house price?
p5 <- ggplot(data = df, mapping = aes(x = factor(floors), price)) +
geom_boxplot()
### will the waterfront influence the house price?
p6 <- ggplot(data = df, mapping = aes(x = factor(waterfront), price)) +
geom_boxplot()
### will the view influence the house price?
p7 <- ggplot(data = df, mapping = aes(x = factor(view), price)) +
geom_boxplot()
### will the waterfront influence the house price?
p8 <- ggplot(data = df, mapping = aes(x = factor(waterfront), price)) +
geom_boxplot()
### will the location influence the house price?
p9 <- ggplot(data = df, mapping = aes(x = factor(zipcode), price)) +
geom_boxplot() +
coord_flip()
### will the age influence the house price?
p10 <- ggplot(data = df, mapping = aes(x = age, price)) +
geom_point()
grid.arrange(p2, p5, p6, p7, p8, nrow=3)
grid.arrange(p3, p4, p9, p10, nrow=2)
summary(fit1)
par(mfrow=c(2, 2))
plot(fit1)
View(p4)
actualpred <- data.frame(cbind(actuals = testing$logprice, predicteds = predtest))
## fit the testing data
predtest <- predict(fit1, testing)
## calculate the accuracy and error rate
actualpred <- data.frame(cbind(actuals = testing$logprice, predicteds = predtest))
correlationaccuracy <- cor(actualpred)
#correlationaccuracy
data.frame( R2 = R2(predtest, testing$logprice),
RMSE = RMSE(predtest, testing$logprice),
MAE = MAE(predtest, testing$logprice))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
pacman::p_load(stringr, magrittr, ggplot2, dplyr, leaflet, arm, DAAG, car, caret, png, grid, gridExtra, kable)
## fit the testing data
predtest <- predict(fit1, testing)
## calculate the accuracy and error rate
actualpred <- data.frame(cbind(actuals = testing$logprice, predicteds = predtest))
correlationaccuracy <- cor(actualpred)
#correlationaccuracy
kable(data.frame( R2 = R2(predtest, testing$logprice),
RMSE = RMSE(predtest, testing$logprice),
MAE = MAE(predtest, testing$logprice)))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
pacman::p_load(stringr, magrittr, ggplot2, dplyr, leaflet, arm, DAAG, car, caret, png, grid, gridExtra)
## fit the testing data
predtest <- predict(fit1, testing)
## calculate the accuracy and error rate
actualpred <- data.frame(cbind(actuals = testing$logprice, predicteds = predtest))
correlationaccuracy <- cor(actualpred)
#correlationaccuracy
data.frame( R2 = R2(predtest, testing$logprice),
RMSE = RMSE(predtest, testing$logprice),
MAE = MAE(predtest, testing$logprice))
## k-fold Cross-Validation
par(mfrow=c(1, 1))
cv.lm(df, form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = T)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
pacman::p_load(stringr, magrittr, ggplot2, dplyr, leaflet, arm, DAAG, car, caret, png, grid, gridExtra)
# load data
setwd("/Users/amelia/Documents/mssp/MA678/MA678-Midterm-proposal")
df <- read.table("kc_house_data.txt", sep = ",", header = T)
# select data
df$date %<>% str_sub(1, 8)
df$year <- str_sub(df$date, 1, 4)
df$month <- str_sub(df$date, 5, 6)
df$day <- str_sub(df$date, 7, 8)
df$yr_latest <- ifelse(df$yr_built > df$yr_renovated, df$yr_built, df$yr_renovated)
df$year %<>% as.numeric()
df$yr_latest %<>% as.numeric()
df$age <- df$year - df$yr_latest
df$logprice <- log(df$price)
df %<>% na.omit()
# use training data
fit1 <- lm(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age, data = df)
par(mfrow=c(2, 2))
plot(fit1)
## fit the testing data
predtest <- predict(fit1, testing)
## calculate the accuracy and error rate
actualpred <- data.frame(cbind(actuals = testing$logprice, predicteds = predtest))
correlationaccuracy <- cor(actualpred)
#correlationaccuracy
data.frame( R2 = R2(predtest, testing$logprice),
RMSE = RMSE(predtest, testing$logprice),
MAE = MAE(predtest, testing$logprice))
summary(df)
comhouse <- df %>% group_by(bedrooms, floors) %>% summarise(count = sum(price > 0))
p1 <- ggplot(comhouse, aes(x = floors, y = bedrooms, size = count)) +
geom_point() +
ylim(0, 13) +
ggtitle("The most common house") +
theme(plot.title = element_text(hjust = 0.5))
p1
monhouse <- df %>% group_by(month) %>% summarise(count = sum(price > 0))
p2 <- ggplot(monhouse, aes(x = month, y = count, fill = factor(month))) +
geom_bar(stat = "identity") +
guides(fill = F)
p2
summary(fit1)
par(mfrow=c(1, 1))
cv.lm(df,
form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = T)
par(mfrow=c(1, 1))
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=5)
# Fit Naive Bayes Model
model <- train(logprice ~ ., data=df2, trControl=train_control, method="lm")
par(mfrow=c(1, 1))
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=5)
# Fit Naive Bayes Model
model <- train(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age, data=df, trControl=train_control, method="lm")
# Summarise Results
print(model)
cv.lm(df, form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = F)
par(mfrow=c(1, 1))
cv.lm(df, form.lm=formula(logprice ~ bedrooms + bathrooms + sqft_living + factor(floors) + factor(waterfront) + factor(view) + factor(condition) + grade + factor(zipcode) + age),
m=5, dots = FALSE, plotit = T, printit = F)
install.packages("MatchIt")
library(MatchIt)
library(tidyverse)
library(ggplot2)
#Set up fake dqta for "Patients" and "Populous"
set.seed(1234)
df.patients = data.frame(Age=sample(30:78,250,replace=T),Sex=sample(c("Male","Female"),250,replace=T,prob=c(0.7,0.3)),Sample=as.factor("Patients"))
library(MatchIt)
library(tidyverse)
library(ggplot2)
#Set up fake dqta for "Patients" and "Populous"
set.seed(1234)
df.patients = data.frame(Age=sample(30:78,250,replace=T),Sex=sample(c("Male","Female"),250,replace=T,prob=c(0.7,0.3)),Sample=as.factor("Patients"))
df.pop = data.frame(Age=sample(18:80,1000,replace=T),Sex=sample(c("Male","Female"),1000,replace=T),Sample=as.factor("Population"))
#Merge the two together into one table
data = rbind(df.patients,df.pop)
data$Group = as.logical(data$Sample=="Patients")
#Make a new variable
for(i in 1:nrow(data)){
data$Distress[i] = ifelse(data$Sex[i] =="Male",sample(0:42,1), sample(15:42,1))
}
#Assess data before match
data %>% group_by(Group) %>% summarize(number=n(),
mean_age=mean(Age),
std_error=sd(Age)/sqrt(number),
mean_sex=mean(Sex=="Male"))
data %>% group_by(Group) %>% summarize(number=n(),
mean_distress=mean(Distress),
std_error=sd(Distress)/sqrt(number))
t.test(data$Age ~ data$Group)
ggplot(data) + aes(x=Age,fill=Sample) + geom_histogram() + facet_wrap(~Sample,ncol=1) + theme_bw() + ylab("") + theme(axis.title=element_text(size=16), strip.text = element_text(size = 16),axis.text = element_text( size = 14 ),legend.position="none")
#Propensity scores are from logistic regression, so let's look at how this goes.
scoremodel = glm(Group ~ Age + Sex,data=data,family=binomial())
propenscores = data.frame(pr_score = predict(scoremodel,type="response"),
Group= scoremodel$model$Group)
head(propenscores)
scoremodel
propenscores %>%
mutate(Group == ifelse(Group==T, "Patient","Population")) %>%
ggplot(aes(x = pr_score,fill=Group)) +
geom_histogram(color="white") +
facet_wrap(~Group) +
xlab("Probability of getting treated") +
theme_bw()
#The package MatchIt lets us use propensity score matching more easily and gives us a variety of options for matching algorithms
match.it = matchit(Group~Age+Sex, data=data,method="nearest")
#Here we can see our remaining data post-matching
df.match = match.data(match.it)
head(df.match)
#We can compare our groups again with our new matched dataset.
t.test(df.match$Age ~ df.match$Group)
ggplot(df.match) + aes(x=Age,fill=Sample) + geom_histogram() + facet_wrap(~Sample,ncol=1) + theme_bw() + ylab("") + theme(axis.title=element_text(size=16), strip.text = element_text(size = 16),axis.text = element_text( size = 14 ),legend.position="none")
#We can now estimate treatment effects. We can use t-tests or other things, but here I'll use a linear regression.
model = lm(Distress ~ Group + Age + Sex, data=df.match)
summary(model)
#Set up fake dqta for "Patients" and "Populous"
set.seed(1234)
df.patients = data.frame(Age=sample(30:78,250,replace=T),Sex=sample(c("Male","Female"),250,replace=T,prob=c(0.7,0.3)),Sample=as.factor("Patients"))
df.pop = data.frame(Age=sample(18:80,1000,replace=T),Sex=sample(c("Male","Female"),1000,replace=T),Sample=as.factor("Population"))
#Merge the two together into one table
data = rbind(df.patients,df.pop)
View(data)
data$Group = as.logical(data$Sample=="Patients")
#Make a new variable
for(i in 1:nrow(data)){
data$Distress[i] = ifelse(data$Sex[i] =="Male",sample(0:42,1), sample(15:42,1))
}
#Assess data before match
data %>% group_by(Group) %>% summarize(number=n(),
mean_age=mean(Age),
std_error=sd(Age)/sqrt(number),
mean_sex=mean(Sex=="Male"))
data %>% group_by(Group) %>% summarize(number=n(),
mean_distress=mean(Distress),
std_error=sd(Distress)/sqrt(number))
t.test(data$Age ~ data$Group)
ggplot(data) + aes(x=Age,fill=Sample) + geom_histogram() + facet_wrap(~Sample,ncol=1) + theme_bw() + ylab("") + theme(axis.title=element_text(size=16), strip.text = element_text(size = 16),axis.text = element_text( size = 14 ),legend.position="none")
#Propensity scores are from logistic regression, so let's look at how this goes.
scoremodel = glm(Group ~ Age + Sex,data=data,family=binomial())
propenscores = data.frame(pr_score = predict(scoremodel,type="response"),
Group= scoremodel$model$Group)
